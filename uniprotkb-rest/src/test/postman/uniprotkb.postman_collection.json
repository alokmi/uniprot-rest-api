{
	"info": {
		"_postman_id": "35201244-5bef-418c-866e-51ffbaa5ca4a",
		"name": "uniprotkb",
		"description": "Test suite for UniProtKB requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "search",
			"item": [
				{
					"name": "Scenario-1",
					"item": [
						{
							"name": "Search Proteins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "771979a8-a68d-4cb5-b749-c3fc7e1e0a83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
											"});",
											"",
											"// get the response data",
											"let jsonData = pm.response.json();",
											"// verify array",
											"utils.verifyArray(\"results\", jsonData.results);",
											"// verify length",
											"pm.test(\"Results size\", function () {",
											"    pm.expect(jsonData.results,  'results length mismatch').to.have.lengthOf(25);",
											"});",
											"",
											"// get first accession and set it for next step",
											"let accession = jsonData.results[0].primaryAccession;",
											"pm.environment.set(\"scenario-1-accession\", accession);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{scenario-1-search-term}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "{{scenario-1-search-term}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by accession",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e0fdf21-51c9-4f79-aadb-c27992980a1a",
										"exec": [
											"",
											"// verify common headers",
											"let xRelease = pm.globals.get('x_release');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, undefined, undefined, undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"// X-Cache-Info - Sample code to verify a single header",
											"let verifyXCacheInfoHeader = eval(pm.globals.get(\"verifyXCacheInfoHeader\"));",
											"verifyXCacheInfoHeader();",
											"",
											"// verify data",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"entryType\", function () {",
											"    pm.expect(jsonData.entryType).to.eql(\"UniProtKB reviewed (Swiss-Prot)\");",
											"});",
											"",
											"pm.test(\"primaryAccession\", function () {",
											"    pm.expect(jsonData.primaryAccession).to.eql(pm.environment.get(\"scenario-1-accession\"));",
											"});",
											"",
											"",
											"pm.test(\"uniProtkbId\", function () {",
											"    pm.expect(jsonData.uniProtkbId).to.eql(\"CDC7_HUMAN\");",
											"});",
											"",
											"pm.test(\"annotationScore\", function () {",
											"    pm.expect(jsonData.annotationScore).to.eql(0.0);",
											"});",
											"",
											"utils.verifyOrganism(jsonData.organism, \"Homo sapiens\", \"Human\", 9606, ",
											"[\"Eukaryota\",",
											"            \"Metazoa\",",
											"            \"Chordata\",",
											"            \"Craniata\",",
											"            \"Vertebrata\",",
											"            \"Euteleostomi\",",
											"            \"Mammalia\",",
											"            \"Eutheria\",",
											"            \"Euarchontoglires\",",
											"            \"Primates\",",
											"            \"Haplorrhini\",",
											"            \"Catarrhini\",",
											"            \"Hominidae\",",
											"            \"Homo\"]);",
											"",
											"pm.test(\"proteinExistence\", function () {",
											"    pm.expect(jsonData.proteinExistence).to.eql(\"1: Evidence at protein level\");",
											"});",
											"",
											"pm.test(\"proteinDescription\", function () {",
											"    utils.verifyNotNull(\"proteinDescription\", jsonData.proteinDescription);",
											"});",
											"",
											"pm.test(\"genes array\", function () {",
											"    utils.verifyArray(\"genes\", jsonData.genes);",
											"    pm.expect(jsonData.genes, 'genes length mismatch').to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"genes value\", function () {",
											"    pm.expect(jsonData.genes[0].geneName.value).to.eql(\"CDC7\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accession/{{scenario-1-accession}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{scenario-1-accession}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download in text format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53301027-da07-4566-9bf5-257eb8d03b80",
										"exec": [
											"let verifyStatusHeader = eval(pm.globals.get(\"verifyStatusHeader\"));",
											"verifyStatusHeader();",
											"",
											"let verifyContentType = eval(pm.globals.get(\"verifyContentTypeHeader\"));",
											"verifyContentType('text/flatfile');",
											"",
											"let accession = pm.environment.get(\"scenario-1-accession\");",
											"pm.test(\"Accession match\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"AC   \" + accession);",
											"});",
											"",
											"pm.test(\"ID match\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ID   CDC7_HUMAN\");",
											"});",
											"",
											"pm.test(\"Gene name match\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"GN   Name=CDC7;\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/flatfile",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/stream?query={{scenario-1-accession}}&download=true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"stream"
									],
									"query": [
										{
											"key": "query",
											"value": "{{scenario-1-accession}}"
										},
										{
											"key": "download",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "1. Search using gene and organism\n2. Get the first entry\n3. Download the first entry as text file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0b96e8ed-0210-459f-9dbd-92bcf65a049f",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"scenario-1-search-term\", \"cdc7 human\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "260ce722-37ab-436d-8a32-ec9b9e6ab0fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Proteins",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65248611-871a-4d56-a1bb-24ef8bbfe168",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
									"});",
									"// verify data",
									"let jsonData = pm.response.json();",
									"utils.verifyResults(jsonData.results, ['A9Q1J6', 'P0CI25']);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ac0b90d-4cad-4feb-93bd-d83b5fdc6515",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_by_gene}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_by_gene}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fa55663-21c6-4a20-a762-48d75c5248d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene tsv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d107631-1913-4820-8c30-73f5900af84d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a8f70df-43bc-459b-92ad-af63e7db0ffc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /search API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "286e9089-e349-4165-80c3-2884defaaf2b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "df91cd15-6860-4594-9b9f-39e27db04a4b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "accession",
			"item": [
				{
					"name": "Get by accession",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4f455a6-2e6e-47d5-bfa6-2e696f0ec1c8",
								"exec": [
									"// use console.log(msg), console.info(msg), console.warn(msg), console.error(msg) ",
									"// to log various types of message on Postman Console",
									"//e.g. console.warn(\"This is a sample warning message to print on Postman console\");",
									"//e.g.console.error(\"This is a sample error message to print on Postman console\");",
									"",
									"// verify common headers",
									"let xRelease = pm.globals.get('x_release');",
									"let controlAllow = pm.globals.get('control_origin');",
									"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
									"verifyHeaders(undefined, undefined, undefined, undefined, ",
									"            undefined, undefined, xRelease, controlAllow);",
									"",
									"// X-Cache-Info - Sample code to verify a single header",
									"let verifyXCacheInfoHeader = eval(pm.globals.get(\"verifyXCacheInfoHeader\"));",
									"verifyXCacheInfoHeader();",
									"",
									"// verify data",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"entryType\", function () {",
									"    pm.expect(jsonData.entryType).to.eql(\"UniProtKB reviewed (Swiss-Prot)\");",
									"});",
									"",
									"pm.test(\"primaryAccession\", function () {",
									"    pm.expect(jsonData.primaryAccession).to.eql(\"P12345\");",
									"});",
									"",
									"utils.verifySecondaryAccessions(jsonData.secondaryAccessions, [\"G1SKL2\"]);",
									"",
									"",
									"pm.test(\"uniProtkbId\", function () {",
									"    pm.expect(jsonData.uniProtkbId).to.eql(\"AATM_RABIT\");",
									"});",
									"",
									"// verify entryAudit",
									"var expectedFirstPublicDate = '1989-10-01';",
									"var expectedLastAnnotationUpdateDate ='2020-06-17';",
									"var expectedLastSequenceUpdateDate = '2013-09-18';",
									"var expectedEntryVersion = 126;",
									"var expectedSequenceVersion = 2;",
									"",
									"utils.verifyEntryAudit(jsonData.entryAudit, expectedFirstPublicDate, expectedLastAnnotationUpdateDate, expectedLastSequenceUpdateDate, expectedEntryVersion, expectedSequenceVersion);",
									"",
									"console.log(jsonData.annotationScore);",
									"pm.test(\"annotationScore\", function () {",
									"    pm.expect(jsonData.annotationScore).to.eql(0.0);",
									"});",
									"",
									"utils.verifyOrganism(jsonData.organism, \"Oryctolagus cuniculus\", \"Rabbit\", 9986, ",
									"[\"Eukaryota\", \"Metazoa\", \"Chordata\", \"Craniata\", \"Vertebrata\", \"Euteleostomi\", \"Mammalia\",",
									"\"Eutheria\", \"Euarchontoglires\", \"Glires\", \"Lagomorpha\", \"Leporidae\", \"Oryctolagus\"]);",
									"",
									"pm.test(\"proteinExistence\", function () {",
									"    pm.expect(jsonData.proteinExistence).to.eql(\"1: Evidence at protein level\");",
									"});",
									"",
									"pm.test(\"proteinDescription\", function () {",
									"    utils.verifyNotNull(\"proteinDescription\", jsonData.proteinDescription);",
									"});",
									"",
									"var expectedFullName = {\"value\": \"Aspartate aminotransferase, mitochondrial\"};",
									"var expectedShortNames = [{\"value\": \"mAspAT\"}];",
									"var expectedEcNumbers = [{\"value\": \"2.6.1.1\"},{\"value\": \"2.6.1.7\"}];",
									"utils.verifyProteinName(\"recommendedName\", jsonData.proteinDescription.recommendedName,  ",
									"    expectedFullName, expectedShortNames, expectedEcNumbers);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accession/{{accession}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"accession",
								"{{accession}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /accession/{accession} API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2509ba77-e1eb-4bce-8406-ab4c4e3cffdf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "599aaacb-d2ef-4e52-b43c-ff25cf3279f7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "accessions",
			"item": [
				{
					"name": "Get Proteins by accession list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf8396e2-32bb-48d5-a4bb-d3ebc4511f1d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"accessions"
							],
							"query": [
								{
									"key": "accessions",
									"value": "{{accession_list}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /accessions API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4bc42c9e-38da-4559-a8df-11609afc68b2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "af86fbdf-58cf-43a0-b73f-6e4f9992fc93",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "stream",
			"item": [
				{
					"name": "Stream Proteins",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ad4bb06-955c-4231-ac39-1cf05a1bf335",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/stream?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"stream"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /stream API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6ab7c94f-c034-42c7-9bea-9032cceea6c0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aca39634-773c-4cef-bb7b-c00637293c97",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0dc62f1a-742b-4866-bccc-85955e980226",
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"  verifyEntryAudit: function(entryAudit, firstPublicDate, lastAnnotationUpdateDate, lastSequenceUpdateDate, entryVersion, sequenceVersion) {",
					"    pm.test(\"entryAudit\", function () {",
					"      utils.verifyNotNull(\"entryAudit\", entryAudit);",
					"      pm.expect(entryAudit, 'is not an object').to.be.an(\"object\");",
					"      pm.expect(entryAudit.firstPublicDate, \"firstPublicDate\").to.eql(firstPublicDate);",
					"      pm.expect(entryAudit.lastAnnotationUpdateDate, \"lastAnnotationUpdateDate\").to.eql(lastAnnotationUpdateDate);",
					"      pm.expect(entryAudit.lastSequenceUpdateDate, \"lastSequenceUpdateDate\").to.eql(lastSequenceUpdateDate);",
					"      pm.expect(entryAudit.entryVersion, \"entryVersion\").to.eql(entryVersion);",
					"      pm.expect(entryAudit.sequenceVersion, \"sequenceVersion\").to.eql(sequenceVersion);",
					"  })},",
					"",
					"  verifySecondaryAccessions: function(secondaryAccessions, accessions) {",
					"    pm.test(\"secondaryAccessions\", function () {",
					"    utils.verifyArrayValues(\"secondaryAccessions\", secondaryAccessions, accessions);",
					"})},",
					"",
					"verifyOrganism: function(organism, scientificName, commonName, taxonId, lineage, evidences) {",
					"    pm.test(\"organism\", function () {",
					"      utils.verifyNotNull(\"organism\", organism);",
					"      pm.expect(organism, 'is not an object').to.be.an(\"object\");",
					"      pm.expect(organism.scientificName, \"scientificName\").to.eql(scientificName);",
					"      pm.expect(organism.commonName, \"commonName\").to.eql(commonName);",
					"      pm.expect(organism.taxonId, \"taxonId\").to.eql(taxonId);  ",
					"      utils.verifyArrayValues(\"lineage\", organism.lineage, lineage);",
					"      pm.expect(organism.evidences, 'is not undefined').to.be.a('undefined');",
					"})},",
					"",
					"verifyProteinName: function(fieldName, proteinName, fullName, shortNames, ecNumbers){",
					"pm.test(fieldName, function () {",
					"      utils.verifyNotNull(fieldName, proteinName);",
					"      pm.expect(proteinName, 'is not an object').to.be.an(\"object\");",
					"      utils.verifyNotNull(\"fieldName\", proteinName.fullName);",
					"      pm.expect(proteinName.fullName, \"fullName\").to.eql(fullName);",
					"      utils.verifyArrayValues(\"shortNames\", proteinName.shortNames, shortNames);",
					"      utils.verifyArrayValues(\"ecNumbers\", proteinName.ecNumbers, ecNumbers);",
					"})",
					"},",
					"// verify results array common things",
					"verifyResults: function(results, expectedPrimaryAccessions){",
					"  pm.test(\"results\", function () {",
					"  utils.verifyArray(\"results\", results);",
					"  // verify primary accession",
					"  let primaryAccessions = results.map(result => result.primaryAccession);",
					"  utils.verifyArrayValues(\"results[*].primaryAccession\", primaryAccessions, expectedPrimaryAccessions);",
					"  // verify entry types",
					"  let entryTypes = results.map(result => result.entryType);",
					"  utils.verifyEntryTypes(\"results[*].entryType\", entryTypes)",
					"  })",
					"},",
					"verifyEntryTypes: function(name, entryTypes){",
					"  utils.verifyArrayValues(name, entryTypes, ['UniProtKB reviewed (Swiss-Prot)', 'UniProtKB unreviewed (TrEMBL)']);",
					"},",
					"verifyArrayValues: function(name, actualValues, expectedValues){",
					"  utils.verifyArray(name, actualValues);",
					"  pm.expect(actualValues, name + ' length mismatch').to.have.lengthOf(expectedValues.length);",
					"  pm.expect(actualValues, name + ' values mismatch').to.have.deep.members(expectedValues);",
					"},",
					"verifyArray: function(name, values){",
					"  utils.verifyNotNull(name, values);",
					"  pm.expect(values, name + ' is not array').to.be.an('array');",
					"},",
					"verifyNotNull: function(name, value){",
					"  pm.expect(value, name + ' is undefined').not.to.be.a('undefined');",
					"  pm.expect(value, name + ' is null').not.to.be.a('null');",
					"}",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "edd32891-71f9-4b99-8899-1135877c9631",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "21fe0ede-2a28-4ec9-9c30-a3d55dc5647e",
			"key": "search_value",
			"value": "rnf18"
		},
		{
			"id": "7fde8de1-5379-42a0-a20f-f22054b2065e",
			"key": "accession_list",
			"value": "P0CI25,A6NDI0,A9Q1J6,P12345"
		},
		{
			"id": "92c792e6-639c-4d4b-9b40-ee53474cbede",
			"key": "accession",
			"value": "P12345"
		},
		{
			"id": "870c86a9-bd4d-46a6-9938-ba6def072c75",
			"key": "search_by_gene",
			"value": "gene:p53"
		}
	],
	"protocolProfileBehavior": {}
}